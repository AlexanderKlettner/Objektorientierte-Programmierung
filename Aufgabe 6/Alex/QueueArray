import java.util.*;

public class QueueArray <E> {
   private ArrayList <E> queue;
   
   //default constructor for creating an empty queue
   public QueueArray () {
      queue = new ArrayList <E>();
   }


   //inserts item at the end of the queue
   public void enqueue(E item){
      queue.add(item);
   }

   //returns the head of the queue and deletes it from the queue;
   //returns null if queue is empty
   public E dequeue(){
      if(!queue.isEmpty()){
         E head = queue.get(0);
         this.queue.remove(0);
         return head;
      }else return null;
   }

   //returns the number of elements in the queue
   public int size(){
      return queue.size();
   }
   
   //test if queue is empty
   public boolean isEmpty(){
      return queue.isEmpty();
   }

   //returns a String-representation of this queue as
   //[item1, item2, ..., itemn] with item1 as the top item 
   //and itemn as the last inserted item
   public String toString (){
      return this.queue.toString();
   }
     // String s = "";
//       
//       for(int i = 0; i<queue.size(); i++){
//          if( i != queue.size()-1){
//             s = s+ queue.get(i) + ", ";}
//          else{ s = s+ queue.get(i);}
//       }
//       return "[" + s +"]";   
//   }



   //returns an iterator for traversing the queue
   public IteratorArray<E> getIterator(){
      IteratorArray<E> it = new IteratorArray<E>();
      return it;
   }
   
   
   private class IteratorArray <T> implements MyIterator{
      private ArrayList<E> iteratorlist;
      private int counter;
      
      private IteratorArray(){
         this.iteratorlist = queue;
         counter = -1;
      }    
      
      //true if the iteration has more elements
      public boolean hasNext(){
         
         return (this.counter < this.iteratorlist.size() - 1);
      }

      //returns the next element in the iteration â€“ requires hasNext()!
      public E getNext(){
         if( this.hasNext()){
            counter++;
            return iteratorlist.get(counter);
         }else return null;
      }
   }
}
